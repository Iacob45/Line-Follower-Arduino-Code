#include <avr/pgmspace.h>

#include <LCD.h>

#include <Wire.h>

#include "Mixly.h"



volatile byte inceput;

volatile byte inainte;

volatile byte inapoi;

volatile int stare;

volatile int senzorStanga;

volatile int senzorDreapta;

volatile int i;

volatile int j;

volatile int k;

volatile int lmax;

volatile int lmay;

volatile int right;

volatile int left;



LCD Lcd;

#define RGBPIN   2

/*存储图形*/ const PROGMEM  uint8_t  arduino[]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xC0,0xE0, 0xF0,0xF0,0xF8,0xF8,0xFC,0xFC,0xFE,0xFE,0xFE,0x7F,0x7F,0x3F,0x3F,0x3F,0x3F,0x3F, 0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x3F,0x3F,0x3F,0x3F,0x3F,0x7F,0x7F,0x7E,0xFE, 0xFE,0xFC,0xFC,0xFC,0xF8,0xF8,0xF0,0xF0,0xE0,0xC0,0xC0,0x80,0x00,0x00,0x00,0x00, 0x00,0x00,0x80,0xC0,0xC0,0xE0,0xE0,0xF0,0xF8,0xF8,0xF8,0xFC,0xFC,0xFE,0xFE,0xFE, 0x7E,0x7F,0x3F,0x3F,0x3F,0x3F,0x3F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x3F,0x3F, 0x3F,0x3F,0x3F,0x7F,0x7F,0xFE,0xFE,0xFE,0xFC,0xFC,0xFC,0xF8,0xF0,0xF0,0xF0,0xF0, 0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xFC,0xFE,0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0x1F,0x0F,0x03,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80, 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00, 0x00,0x01,0x03,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF,0xFF,0xFF,0xFF,0xFE,0xFC,0xFC, 0xFE,0xFF,0xFF,0xFF,0xFF,0x7F,0x3F,0x1F,0x0F,0x07,0x03,0x03,0x01,0x01,0x00,0x00, 0x00,0x00,0x80,0x80,0x80,0x80,0x80,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0x80,0x80,0x80, 0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x03,0x07,0x1F,0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0xFF,0xFC,0xF8,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0xF8,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x03,0x03,0x03, 0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x00,0x00,0x00,0x00, 0x00,0x80,0x80,0xC0,0xE0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF,0xFF,0xFF,0xFF,0x7F,0x7F, 0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0xF8,0xF0,0xF0,0xE0,0xC0,0x80,0x80,0x00,0x00,0x00, 0x00,0x00,0x03,0x03,0x03,0x03,0x03,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x03,0x03,0x03, 0x03,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0xF0,0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0xFF,0x7F,0x1F,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,0x0F, 0x0F,0x1F,0x1F,0x3F,0x3F,0x7F,0x7F,0x7F,0xFE,0xFE,0xFC,0xFC,0xFC,0xFC,0xF8,0xF8, 0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xFC,0xFC,0xFC,0xFC,0xFE,0xFE,0x7F, 0x7F,0x7F,0x3F,0x3F,0x1F,0x1F,0x0F,0x0F,0x07,0x07,0x03,0x01,0x01,0x00,0x00,0x00, 0x00,0x00,0x01,0x03,0x07,0x07,0x0F,0x0F,0x1F,0x1F,0x3F,0x3F,0x7F,0x7F,0x7F,0xFE, 0xFE,0xFC,0xFC,0xFC,0xFC,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8, 0xFC,0xFC,0xFC,0xFC,0xFE,0xFE,0x7F,0x7F,0x7F,0x3F,0x3F,0x1F,0x1F,0x0F,0x0F,0x07, 0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80, 0xC0,0xC0,0xC0,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xC0,0xC1,0xC1,0xC1, 0xC1,0xC1,0xC1,0xC1,0xC1,0x81,0x81,0x01,0x01,0x01,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0, 0xC0,0xC0,0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,0xC0,0xC0,0xC0,0xC0,0x00,0x00,0x00, 0x00,0xC0,0xC0,0xC0,0xC0,0x00,0x00,0x00,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0, 0xC0,0xC0,0xC0,0xC0,0x01,0x01,0x01,0xC1,0xC1,0xC1,0xC1,0xC1,0x01,0x01,0x01,0x01, 0xC1,0xC0,0xC0,0x00,0x00,0x00,0x00,0x80,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0, 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xE0,0xF8,0xFE,0x7F, 0x3F,0x31,0x31,0x3F,0x3F,0xFF,0xFC,0xE0,0xC0,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x18, 0x18,0x18,0x7C,0xFF,0xFF,0xEF,0xC7,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xC0,0xC0, 0xC0,0xE0,0x73,0x7F,0x3F,0x3F,0x00,0x00,0x00,0x3F,0x7F,0x7F,0xFF,0xE0,0xC0,0xC0, 0xE0,0xFF,0x7F,0x7F,0x3F,0x00,0x00,0x00,0xC0,0xC0,0xC0,0xC0,0xFF,0xFF,0xFF,0xFF, 0xC0,0xC0,0xC0,0xC0,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x03,0x07,0x0F,0x1E,0x3C,0x78, 0xFF,0xFF,0xFF,0x00,0x00,0x00,0x3F,0x7F,0x7F,0xFF,0xE0,0xC0,0xC0,0xE0,0xFF,0x7F, 0x7F,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};;

Adafruit_NeoPixel  rgb_display_RGBPIN(8);

void RGB_Light() {

  rgb_display_RGBPIN.setPixelColor(1-1, 165,0,0);

  rgb_display_RGBPIN.show();

  delayMicroseconds(100);

  rgb_display_RGBPIN.setPixelColor(2-1, 165,0,0);

  rgb_display_RGBPIN.show();

  delayMicroseconds(100);

  rgb_display_RGBPIN.setPixelColor(3-1, 90,75,0);

  rgb_display_RGBPIN.show();

  delayMicroseconds(100);

  rgb_display_RGBPIN.setPixelColor(4-1, 90,75,0);

  rgb_display_RGBPIN.show();

  delayMicroseconds(100);

  rgb_display_RGBPIN.setPixelColor(5-1, 90,75,0);

  rgb_display_RGBPIN.show();

  delayMicroseconds(100);

  rgb_display_RGBPIN.setPixelColor(6-1, 0,0,165);

  rgb_display_RGBPIN.show();

  delayMicroseconds(100);

  rgb_display_RGBPIN.setPixelColor(7-1, 0,0,165);

  rgb_display_RGBPIN.show();

  delayMicroseconds(100);

  rgb_display_RGBPIN.setPixelColor(8-1, 0,0,165);

  rgb_display_RGBPIN.show();

}



void Lcd_Display() {

  Lcd.Display_MatrixClear(0, 0, 0xc0);

  Lcd.Display_ASCII(i, 6, "La multi ani");

  Lcd.Display_ASCII(i+1, 9, "2006!");

}



void Lcd_DisplayFuge() {

  Lcd.Display_MatrixClear(0, 0, 0xc0);

  lmax = random(1, 12);

  lmay = random(1, 8);

  Lcd.Display_ASCII(lmay, lmax, "La multi ani");

  Lcd.Display_ASCII(lmay + 1, lmax + 3, "2006!");

}



void setup(){

  rgb_display_RGBPIN.begin();

  rgb_display_RGBPIN.setPin(RGBPIN);

  inceput = 254;

  inainte = 240;

  inapoi = 186;

  stare = 0;

  senzorStanga = 0;

  senzorDreapta = 0;

  i = 1;

  j = 0;

  k = 1;

  lmax = 1;

  lmay = 1;

  right = 200;

  left = 200;

  pinMode(3, INPUT);

  pinMode(9, INPUT);

  pinMode(RGBPIN, OUTPUT);

  Lcd.Init();

  Lcd_Display();

  RGB_Light();

  Serial.begin(9600);

}



void loop(){

  senzorStanga = digitalRead(3);

  senzorDreapta = digitalRead(9);

  if (senzorStanga == 1) {

    if (senzorDreapta == 1) {

      stare = 1;



    } else {

      stare = 0;



    }



  } else if (senzorDreapta == 1) {

    stare = 2;

  } else {

    stare = -1;



  }

  switch (stare) {

   case 0:

    Serial.write(inceput);

    Serial.write(1);

    Serial.write(inainte);

    Serial.write(90);

    Serial.write(inceput);

    Serial.write(2);

    Serial.write(inainte);

    Serial.write(200);

    right = 100;

    left = 0;

    break;

   case 1:

    Serial.write(inceput);

    Serial.write(1);

    Serial.write(inainte);

    Serial.write(200);

    Serial.write(inceput);

    Serial.write(2);

    Serial.write(inainte);

    Serial.write(200);

    break;

   case 2:

    Serial.write(inceput);

    Serial.write(1);

    Serial.write(inainte);

    Serial.write(200);

    Serial.write(inceput);

    Serial.write(2);

    Serial.write(inainte);

    Serial.write(75);

    right = 0;

    left = 110;

    break;

   default:

    Serial.write(inceput);

    Serial.write(1);

    Serial.write(inainte);

    Serial.write(left);

    Serial.write(inceput);

    Serial.write(2);

    Serial.write(inainte);

    Serial.write(right);

    break;

  }

  i = i + 1;

  if (i == 900) {

    i = 1;

    Lcd_DisplayFuge();



  }

  if ((long) (i) % (long) (100) == 0) {

    Lcd_DisplayFuge();



  }

  if (j == 12) {

    j = 0;

    k = k + 1;



  }

  if (k == 8) {

    k = 1;



  }

  if ((long) (i) % (long) (1) == 0) {

    j = j + 1;

    switch (j) {

     case 1:

      switch (k) {

       case 1:

        rgb_display_RGBPIN.setPixelColor(1-1, 165,0,0);

        rgb_display_RGBPIN.show();

        break;

       case 2:

        rgb_display_RGBPIN.setPixelColor(1-1, 0,0,165);

        rgb_display_RGBPIN.show();

        break;

       case 3:

        rgb_display_RGBPIN.setPixelColor(1-1, 0,0,165);

        rgb_display_RGBPIN.show();

        break;

       case 4:

        rgb_display_RGBPIN.setPixelColor(1-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 5:

        rgb_display_RGBPIN.setPixelColor(1-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 6:

        rgb_display_RGBPIN.setPixelColor(1-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 7:

        rgb_display_RGBPIN.setPixelColor(1-1, 165,0,0);

        rgb_display_RGBPIN.show();

        break;

      }

      break;

     case 2:

      switch (k) {

       case 2:

        rgb_display_RGBPIN.setPixelColor(2-1, 165,0,0);

        rgb_display_RGBPIN.show();

        break;

       case 3:

        rgb_display_RGBPIN.setPixelColor(2-1, 0,0,165);

        rgb_display_RGBPIN.show();

        break;

       case 4:

        rgb_display_RGBPIN.setPixelColor(2-1, 0,0,165);

        rgb_display_RGBPIN.show();

        break;

       case 5:

        rgb_display_RGBPIN.setPixelColor(2-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 6:

        rgb_display_RGBPIN.setPixelColor(2-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 7:

        rgb_display_RGBPIN.setPixelColor(2-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 1:

        rgb_display_RGBPIN.setPixelColor(2-1, 165,0,0);

        rgb_display_RGBPIN.show();

        break;

      }

      break;

     case 3:

      switch (k) {

       case 3:

        rgb_display_RGBPIN.setPixelColor(3-1, 165,0,0);

        rgb_display_RGBPIN.show();

        break;

       case 4:

        rgb_display_RGBPIN.setPixelColor(3-1, 0,0,165);

        rgb_display_RGBPIN.show();

        break;

       case 5:

        rgb_display_RGBPIN.setPixelColor(3-1, 0,0,165);

        rgb_display_RGBPIN.show();

        break;

       case 6:

        rgb_display_RGBPIN.setPixelColor(3-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 7:

        rgb_display_RGBPIN.setPixelColor(3-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 1:

        rgb_display_RGBPIN.setPixelColor(3-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 2:

        rgb_display_RGBPIN.setPixelColor(3-1, 165,0,0);

        rgb_display_RGBPIN.show();

        break;

      }

      break;

     case 4:

      switch (k) {

       case 4:

        rgb_display_RGBPIN.setPixelColor(4-1, 165,0,0);

        rgb_display_RGBPIN.show();

        break;

       case 5:

        rgb_display_RGBPIN.setPixelColor(4-1, 0,0,165);

        rgb_display_RGBPIN.show();

        break;

       case 6:

        rgb_display_RGBPIN.setPixelColor(4-1, 0,0,165);

        rgb_display_RGBPIN.show();

        break;

       case 7:

        rgb_display_RGBPIN.setPixelColor(4-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 1:

        rgb_display_RGBPIN.setPixelColor(4-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 2:

        rgb_display_RGBPIN.setPixelColor(4-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 3:

        rgb_display_RGBPIN.setPixelColor(4-1, 165,0,0);

        rgb_display_RGBPIN.show();

        break;

      }

      break;

     case 5:

      switch (k) {

       case 5:

        rgb_display_RGBPIN.setPixelColor(5-1, 165,0,0);

        rgb_display_RGBPIN.show();

        break;

       case 6:

        rgb_display_RGBPIN.setPixelColor(5-1, 0,0,165);

        rgb_display_RGBPIN.show();

        break;

       case 7:

        rgb_display_RGBPIN.setPixelColor(5-1, 0,0,165);

        rgb_display_RGBPIN.show();

        break;

       case 1:

        rgb_display_RGBPIN.setPixelColor(5-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 2:

        rgb_display_RGBPIN.setPixelColor(5-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 3:

        rgb_display_RGBPIN.setPixelColor(5-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 4:

        rgb_display_RGBPIN.setPixelColor(5-1, 165,0,0);

        rgb_display_RGBPIN.show();

        break;

      }

      break;

     case 6:

      switch (k) {

       case 6:

        rgb_display_RGBPIN.setPixelColor(6-1, 165,0,0);

        rgb_display_RGBPIN.show();

        break;

       case 7:

        rgb_display_RGBPIN.setPixelColor(6-1, 0,0,165);

        rgb_display_RGBPIN.show();

        break;

       case 1:

        rgb_display_RGBPIN.setPixelColor(6-1, 0,0,165);

        rgb_display_RGBPIN.show();

        break;

       case 2:

        rgb_display_RGBPIN.setPixelColor(6-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 3:

        rgb_display_RGBPIN.setPixelColor(6-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 4:

        rgb_display_RGBPIN.setPixelColor(6-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 5:

        rgb_display_RGBPIN.setPixelColor(6-1, 165,0,0);

        rgb_display_RGBPIN.show();

        break;

      }

      break;

     case 7:

      switch (k) {

       case 7:

        rgb_display_RGBPIN.setPixelColor(7-1, 165,0,0);

        rgb_display_RGBPIN.show();

        break;

       case 1:

        rgb_display_RGBPIN.setPixelColor(7-1, 0,0,165);

        rgb_display_RGBPIN.show();

        break;

       case 2:

        rgb_display_RGBPIN.setPixelColor(7-1, 0,0,165);

        rgb_display_RGBPIN.show();

        break;

       case 3:

        rgb_display_RGBPIN.setPixelColor(7-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 4:

        rgb_display_RGBPIN.setPixelColor(7-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 5:

        rgb_display_RGBPIN.setPixelColor(7-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 6:

        rgb_display_RGBPIN.setPixelColor(7-1, 165,0,0);

        rgb_display_RGBPIN.show();

        break;

      }

      break;

     case 8:

      switch (k) {

       case 1:

        rgb_display_RGBPIN.setPixelColor(8-1, 165,0,0);

        rgb_display_RGBPIN.show();

        break;

       case 2:

        rgb_display_RGBPIN.setPixelColor(8-1, 0,0,165);

        rgb_display_RGBPIN.show();

        break;

       case 3:

        rgb_display_RGBPIN.setPixelColor(8-1, 0,0,165);

        rgb_display_RGBPIN.show();

        break;

       case 4:

        rgb_display_RGBPIN.setPixelColor(8-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 5:

        rgb_display_RGBPIN.setPixelColor(8-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 6:

        rgb_display_RGBPIN.setPixelColor(8-1, 90,75,0);

        rgb_display_RGBPIN.show();

        break;

       case 7:

        rgb_display_RGBPIN.setPixelColor(8-1, 165,0,0);

        rgb_display_RGBPIN.show();

        break;

      }

      break;

    }



  }



}
